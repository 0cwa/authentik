# Generated by Django 3.0.7 on 2020-06-29 08:51

import django.db.models.deletion
from django.apps.registry import Apps
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from passbook.flows.models import FlowDesignation
from passbook.stages.prompt.models import FieldTypes

PROMPT_POLICY_EXPRESSION = """# Check that both passwords are equal.
return request.context['password'] == request.context['password_repeat']"""


def create_default_password_change(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    Flow = apps.get_model("passbook_flows", "Flow")
    FlowStageBinding = apps.get_model("passbook_flows", "FlowStageBinding")

    PolicyBinding = apps.get_model("passbook_policies", "PolicyBinding")

    ExpressionPolicy = apps.get_model(
        "passbook_policies_expression", "ExpressionPolicy"
    )

    PromptStage = apps.get_model("passbook_stages_prompt", "PromptStage")
    Prompt = apps.get_model("passbook_stages_prompt", "Prompt")

    UserWriteStage = apps.get_model("passbook_stages_user_write", "UserWriteStage")

    db_alias = schema_editor.connection.alias

    flow, _ = Flow.objects.using(db_alias).update_or_create(
        slug="default-password-change",
        designation=FlowDesignation.STAGE_SETUP,
        defaults={"name": "Change Password"},
    )

    prompt_stage, _ = PromptStage.objects.using(db_alias).update_or_create(
        name="default-password-change-prompt",
    )
    password_prompt, _ = Prompt.objects.using(db_alias).update_or_create(
        field_key="password",
        defaults={
            "label": "Password",
            "type": FieldTypes.PASSWORD,
            "required": True,
            "placeholder": "Password",
            "order": 0,
        },
    )
    password_rep_prompt, _ = Prompt.objects.using(db_alias).update_or_create(
        field_key="password_repeat",
        defaults={
            "label": "Password (repeat)",
            "type": FieldTypes.PASSWORD,
            "required": True,
            "placeholder": "Password (repeat)",
            "order": 1,
        },
    )
    prompt_stage.fields.add(password_prompt)
    prompt_stage.fields.add(password_rep_prompt)

    # Policy to only trigger prompt when no username is given
    prompt_policy, _ = ExpressionPolicy.objects.using(db_alias).update_or_create(
        name="default-password-change-password-equal",
        defaults={"expression": PROMPT_POLICY_EXPRESSION},
    )
    PolicyBinding.objects.using(db_alias).update_or_create(
        policy=prompt_policy, target=prompt_stage, defaults={"order": 0}
    )

    user_write, _ = UserWriteStage.objects.using(db_alias).update_or_create(
        name="default-password-change-write"
    )

    FlowStageBinding.objects.using(db_alias).update_or_create(
        flow=flow, stage=prompt_stage, defaults={"order": 0}
    )
    FlowStageBinding.objects.using(db_alias).update_or_create(
        flow=flow, stage=user_write, defaults={"order": 1}
    )


class Migration(migrations.Migration):

    dependencies = [
        ("passbook_flows", "0006_auto_20200629_0857"),
        ("passbook_policies_expression", "0001_initial"),
        ("passbook_policies", "0001_initial"),
        ("passbook_stages_password", "0001_initial"),
        ("passbook_stages_prompt", "0004_auto_20200618_1735"),
        ("passbook_stages_user_write", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="passwordstage",
            name="change_flow",
            field=models.ForeignKey(
                blank=True,
                help_text="Flow used by an authenticated user to change their password. If empty, user will be unable to change their password.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="passbook_flows.Flow",
            ),
        ),
        migrations.RunPython(create_default_password_change),
    ]
