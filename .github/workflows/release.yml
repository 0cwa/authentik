name: authentik-on-release

on:
  release:
    types: [published, created]

jobs:
  # Build
  build-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker Login Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_PASSWORD }}
          password: ${{ secrets.DOCKER_USERNAME }}
      - name: Building Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            beryju/authentik:2021.5.1-rc1,
            beryju/authentik:latest,
            ghcr.io/goauthentik/server:2021.5.1-rc1,
            ghcr.io/goauthentik/server:latest
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v8
  build-proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.15"
      - name: prepare go api client
        run: |
          cd outpost
          go get -u github.com/go-swagger/go-swagger/cmd/swagger
          swagger generate client -f ../swagger.yaml -A authentik -t pkg/
          go build -v .
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker Login Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_PASSWORD }}
          password: ${{ secrets.DOCKER_USERNAME }}
      - name: Building Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            beryju/authentik-proxy:2021.5.1-rc1,
            beryju/authentik-proxy:latest,
            ghcr.io/goauthentik/proxy:2021.5.1-rc1,
            ghcr.io/goauthentik/proxy:latest
          context: outpost/
          file: outpost/proxy.Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v8
  build-ldap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.15"
      - name: prepare go api client
        run: |
          cd outpost
          go get -u github.com/go-swagger/go-swagger/cmd/swagger
          swagger generate client -f ../swagger.yaml -A authentik -t pkg/
          go build -v .
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker Login Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_PASSWORD }}
          password: ${{ secrets.DOCKER_USERNAME }}
      - name: Building Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            beryju/authentik-ldap:2021.5.1-rc1,
            beryju/authentik-ldap:latest,
            ghcr.io/goauthentik/ldap:2021.5.1-rc1,
            ghcr.io/goauthentik/ldap:latest
          context: outpost/
          file: outpost/ldap.Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v8
  test-release:
    needs:
      - build-server
      - build-proxy
      - build-ldap
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Run test suite in final docker images
        run: |
          sudo apt-get install -y pwgen
          echo "PG_PASS=$(pwgen 40 1)" >> .env
          echo "AUTHENTIK_SECRET_KEY=$(pwgen 50 1)" >> .env
          docker-compose pull -q
          docker-compose up --no-start
          docker-compose start postgresql redis
          docker-compose run -u root --entrypoint /bin/bash server -c "pip install --no-cache -r requirements-dev.txt && ./manage.py test authentik"
  sentry-release:
    needs:
      - test-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Create a Sentry.io release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: beryjuorg
          SENTRY_PROJECT: authentik
          SENTRY_URL: https://sentry.beryju.org
        with:
          version: authentik@2021.5.1-rc1
          environment: beryjuorg-prod
